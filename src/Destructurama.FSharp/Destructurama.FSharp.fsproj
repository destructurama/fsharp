<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <!--
      We mimic the same frameworks as Serilog as much as we can.
      FSharp.Core itself has a minimum bound of netstandard 1.6 for now, so that pins us.
     -->
    <TargetFrameworks>netstandard1.6;netstandard2.0</TargetFrameworks>
    <DisableImplicitFSharpCoreReference>true</DisableImplicitFSharpCoreReference>
    <GenerateDoc>true</GenerateDoc>

    <!-- Debug/Symbol properties -->
    <DebugType>portable</DebugType>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <!-- Explicitly allowing PDBs in the main package because it's much nicer for consumers/tooling and this is a small library. -->
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    
    <!-- Nuget Package properties -->
    <IsPackable>true</IsPackable>
    <PackageId>Destructurama.FSharp</PackageId>
    <Title>F# Destructuring extensions for Serilog</Title>
    <Authors>Destructurama Contributors</Authors>
    <PackageDescription>Native support for destructuring F# types when logging to Serilog.</PackageDescription>
    <Description>
      A destructuring policy for Serilog loggers that understands how to unwrap and display common F# data types, such as Tuples and Unions.
    </Description>
    <Copyright>Copyright 2019 Destructurama Contributors, Serilog Contributors</Copyright>
    <PackageLicenseExpression>Apache-2.0</PackageLicenseExpression>
    <PackageIconUrl>http://destructurama.github.io/pages/images/destructurama.png</PackageIconUrl>
    <PackageTags>serilog fsharp</PackageTags>
    <VersionPrefix>1.1.0</VersionPrefix>
  </PropertyGroup>
  
  <ItemGroup>
    <Compile Include="DestructuramaFSharp.fs" />
  </ItemGroup>
  
  <ItemGroup>
    <!--
      We manually override the built-in version of FSharp.Core here so that the
      version constraint range for package is better.  FSharp.Core is specifically
      binary-compatible until breaking versions, so this is safe.
    -->
    <PackageReference Include="FSharp.Core" Version="[4.6.2, 5.0.0)" />
    <PackageReference Include="Serilog" Version="[2.8.0, 3.0.0)" />

    <!-- Build tools -->
      <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.0.0-beta2-19351-01" PrivateAssets="All"/>
  </ItemGroup>
</Project>
